#importing packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#reading file
pos = pd.read_csv('supermarket_sales.csv')

#initial index to 1
pos.index += 1
pos.head()

# to find missing values
def find_quantity():
    quantity = (new_pos['gross income'] + new_pos['cogs'])/new_pos['Unit price']
    return quantity
def find_unit_price():
    unit_price = (new_pos['gross income'] + new_pos['cogs'])/new_pos['Quantity']
    return unit_price
def find_gross_income():
    gross_income = new_pos['Unit price'] * new_pos['Quantity'] - new_pos['cogs']
    return gross_income
def find_cogs():
    cogs = new_pos['Unit price'] * new_pos['Quantity'] - new_pos['gross income']
    return cogs
    
#dropping entire rows with NaN/NA for branch, product line and date
new_pos = pos.dropna(how='any', subset=['Branch','Product line', 'Date'])

#populating NA value in rating with mean
new_pos['Rating'].fillna(new_pos['Rating'].mean(), inplace=True)
new_pos['Rating'] = new_pos['Rating'].round(1)

#front fill - NaN data replaced by 1 male 1 female
new_pos['Gender'].fillna(method='ffill', inplace=True)

#filling data
new_pos['Quantity'].fillna(find_quantity(), inplace=True)
new_pos['Unit price'].fillna(find_unit_price(), inplace=True)
new_pos['gross income'].fillna(find_gross_income(), inplace=True)
new_pos['cogs'].fillna(find_cogs(), inplace=True)

#check for specific data
a = ['565-91-4567']
new_pos[new_pos['Invoice ID'].isin(a)]

#Customer Rating Distribution
sns.displot(new_pos['Rating'], kde=True)
plt.axvline(x=np.mean(new_pos['Rating']), c='red', ls='--', label='mean')
plt.axvline(x=np.percentile(new_pos['Rating'],25),c='green', ls='--', label = '25th percentile:Q1')
plt.axvline(x=np.percentile(new_pos['Rating'],75),c='orange', ls='--',label = '75th percentile:Q3' )
plt.legend()

#Gross Income for Each Branch
sns.boxplot(x=new_pos['Branch'], y=new_pos['gross income'])

#Gross Income for Each Branch (Line Graph)
branch_monthly_grossincome = new_pos.loc[:, ['Branch', 'gross income','Date']]
branch_monthly_grossincome['Month'] = branch_monthly_grossincome['Date'].str[0:1]
results = branch_monthly_grossincome.groupby('Month').sum()
months = range(1,4)

results = branch_monthly_grossincome(['Month','Branch']).sum()
results.unstack().plot()
plt.ylabel(' Total sales ($)')
plt.show()

#Gender and Gross Income Distribution
sns.boxplot(x=new_pos['Gender'], y=new_pos['gross income'])
